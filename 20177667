import time

t0 = time.time()#计算该代码运行需要花多少时间


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.available = []
        self.value = 0
 # 更新 判断数据合法时 需要使用到的数据

def rowNum(p, sudoku):
    row = set(sudoku[p.y * 9:(p.y + 1) * 9])
    row.remove(0) # 对上一次成功的值从需要用到的判断的数据中移除
    return row  # set type
# 并且上一次改变的的值变回去

def colNum(p, sudoku):
    col = []
    length = len(sudoku)
    for i in range(p.x, length, 9):
        col.append(sudoku[i])
    col = set(col)
    col.remove(0)
    return col  # set type # 对当前尝试失败的位置已经城市失败的的值进行删除，因为回溯了，所以下一次进来需要重新判断值


def blockNum(p, sudoku):
    block_x = p.x // 3
    block_y = p.y // 3
    block = []
    start = block_y * 3 * 9 + block_x * 3  # 对当前数据添加到当前位置尝试过的的数据中
    for i in range(start, start + 3):
        block.append(sudoku[i])
    for i in range(start + 9, start + 9 + 3):
        block.append(sudoku[i])
    for i in range(start + 9 + 9, start + 9 + 9 + 3):
        block.append(sudoku[i])
    block = set(block)
    block.remove(0)
    return block    # 返回True 和填充的 value


def initPoint(sudoku):
    pointList = []
    length = len(sudoku)
    for i in range(length):
        if sudoku[i] == 0:#数，返回是否成功，如果成功，value为成功 的值，如果失败，value为None
            p = point(i % 9, i // 9)
            for j in range(1, 10):
                if j not in rowNum(p, sudoku) and j not in colNum(p, sudoku) and j not in blockNum(p, sudoku):
                    p.available.append(j)
            pointList.append(p)
    return pointList


def tryInsert(p, sudoku):
    availNum = p.available
    for v in availNum:
        p.value = v
        if check(p, sudoku):
            sudoku[p.y * 9 + p.x] = p.value  # 此处应该有参数传入，却没有传
            if len(pointList) <= 0:
                t1 = time.time()
                useTime = t1 - t0
                showSudoku(sudoku)
                print('\nuse Time: %f s' % (useTime))
                exit()
            p2 = pointList.pop()
            tryInsert(p2, sudoku)
            sudoku[p2.y * 9 + p2.x] = 0
            sudoku[p.y * 9 + p.x] = 0
            p2.value = 0
            pointList.append(p2)
        else:
            pass


def check(p, sudoku):
    if p.value == 0:
        print('not assign value to point p!!')
        return False
    if p.value not in rowNum(p, sudoku) and p.value not in colNum(p, sudoku) and p.value not in blockNum(p, sudoku):
        return True#检测是否有重复值，无则为0，有则不为0
    else:
        return False


def showSudoku(sudoku):
    for j in range(9):
        for i in range(9):
            print('%d ' % (sudoku[j * 9 + i]), end='')
        print('')
   # 得到计算好的数独

if __name__ == '__main__':
    sudoku = [
                 0, 0, 8, 0, 0, 4, 0, 0, 9,
                 0, 6, 0, 0, 0, 0, 1, 0, 0,
                 0, 3, 7, 0, 0, 0, 0, 0, 0,
                 8, 0, 1, 2, 6, 9, 0, 0, 3,
                 0, 2, 5, 4, 7, 0, 0, 6, 8,
                 0, 9, 0, 0, 0, 5, 0, 0, 0,
                 9, 0, 0, 1, 5, 2, 3, 7, 4,
                 0, 4, 0, 3, 9, 8, 0, 1, 6,
                 1, 5, 3, 6, 4, 7, 8, 0, 2,

    ]
    pointList = initPoint(sudoku)
    showSudoku(sudoku)
    print('\n')
    p = pointList.pop()
    tryInsert(p, sudoku)
